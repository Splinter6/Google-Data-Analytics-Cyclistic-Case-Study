                                                        ### NULL Report ###
WITH schema_info AS (
    SELECT
        'ride_id' AS field_name,
        COUNTIF(ride_id IS NULL) AS null_count
    FROM `cyclistic-data-strategy.555.ALL`

    UNION ALL

    SELECT
        'rideable_type' AS field_name,
        COUNTIF(rideable_type IS NULL) AS null_count
    FROM `cyclistic-data-strategy.555.ALL`

    UNION ALL

    SELECT
        'started_at' AS field_name,
        COUNTIF(started_at IS NULL) AS null_count
    FROM `cyclistic-data-strategy.555.ALL`

    UNION ALL

    SELECT
        'ended_at' AS field_name,
        COUNTIF(ended_at IS NULL) AS null_count
    FROM `cyclistic-data-strategy.555.ALL`

    UNION ALL

    SELECT
        'start_station_name' AS field_name,
        COUNTIF(start_station_name IS NULL) AS null_count
    FROM `cyclistic-data-strategy.555.ALL`

    UNION ALL

    SELECT
        'start_station_id' AS field_name,
        COUNTIF(start_station_id IS NULL) AS null_count
    FROM `cyclistic-data-strategy.555.ALL`

    UNION ALL

    SELECT
        'end_station_name' AS field_name,

                                                        ### Distinct Count Report

SELECT 'ride_id' AS column_name, COUNT(DISTINCT ride_id) AS count FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'rideable_type', COUNT(DISTINCT rideable_type) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'started_at', COUNT(DISTINCT started_at) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'ended_at', COUNT(DISTINCT ended_at) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'start_station_name', COUNT(DISTINCT start_station_name) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'start_station_id', COUNT(DISTINCT start_station_id) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'end_station_name', COUNT(DISTINCT end_station_name) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'end_station_id', COUNT(DISTINCT end_station_id) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'start_lat', COUNT(DISTINCT start_lat) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'start_lng', COUNT(DISTINCT start_lng) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'end_lat', COUNT(DISTINCT end_lat) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'end_lng', COUNT(DISTINCT end_lng) FROM `cyclistic-data-strategy.555.ALL`
UNION ALL
SELECT 'member_casual', COUNT(DISTINCT member_casual) FROM `cyclistic-data-strategy.555.ALL`;

                                          ### Irregularity pattern Report ###
WITH counts AS (
  SELECT 
    'start_station_starts_with_space' AS pattern, COUNTIF(REGEXP_CONTAINS(start_station_name, r'^ ')) AS count FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_ends_with_space', COUNTIF(REGEXP_CONTAINS(start_station_name, r' $')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_ends_with_asterisk', COUNTIF(REGEXP_CONTAINS(start_station_name, r'\*$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_ends_with_midblock', COUNTIF(REGEXP_CONTAINS(start_station_name, r' - midblock$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_test', COUNTIF(REGEXP_CONTAINS(start_station_name, r'test')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_temp', COUNTIF(REGEXP_CONTAINS(start_station_name, r'Temp')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_repair', COUNTIF(REGEXP_CONTAINS(start_station_name, r'repair')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_charging', COUNTIF(REGEXP_CONTAINS(start_station_name, r'Charging')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_asterisk', COUNTIF(REGEXP_CONTAINS(start_station_name, r'\*')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_TEST', COUNTIF(REGEXP_CONTAINS(start_station_name, r'TEST')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_is_lyft_driver_center_private_rack', COUNTIF(REGEXP_CONTAINS(start_station_name, r'^Lyft$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_is_buckingham_fountain', COUNTIF(REGEXP_CONTAINS(start_station_name, r'Buckingham - Fountain')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_is_mason_archer', COUNTIF(REGEXP_CONTAINS(start_station_name, r'Mason & Archer')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_starts_with_space', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^ ')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_ends_with_space', COUNTIF(REGEXP_CONTAINS(end_station_name, r' $')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_ends_with_asterisk', COUNTIF(REGEXP_CONTAINS(end_station_name, r'\*$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_ends_with_midblock', COUNTIF(REGEXP_CONTAINS(end_station_name, r' - midblock$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_test', COUNTIF(REGEXP_CONTAINS(end_station_name, r'test')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_temp', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Temp')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_repair', COUNTIF(REGEXP_CONTAINS(end_station_name, r'repair')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_charging', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Charging')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_asterisk', COUNTIF(REGEXP_CONTAINS(end_station_name, r'\*')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_TEST', COUNTIF(REGEXP_CONTAINS(end_station_name, r'TEST')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_divvy_cassette_repair_mobile_station', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^DIVVY CASSETTE REPAIR MOBILE STATION$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_lyft_driver_center_private_rack', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^Lyft$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_351', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^351$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_base_2132_w_hubbard_warehouse', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^Base - 2132 W Hubbard Warehouse$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_hubbard_bike_checking', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Hubbard Bike-checking \(LBS-WH-TEST\)')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_public_rack', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Public Rack - ')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_buckingham_fountain', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Buckingham - Fountain')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_mason_archer', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Mason & Archer')) FROM `cyclistic-data-strategy.555.ALL`
)

SELECT pattern, count

                                                 ###  ID Duplicates ###

Identify and remove duplicates
                                              ### view duplicate primary keys ###

WITH duplicate_ride_id AS (
  SELECT 
    ride_id,
    COUNT(*) AS count
  FROM 
    `cyclistic-data-strategy.555.ALL`
  GROUP BY 
    ride_id
  HAVING 
    COUNT(*) > 1
)

SELECT 
  a.*
FROM 
  `cyclistic-data-strategy.555.ALL` a
JOIN 
  duplicate_ride_id d
ON 
  a.ride_id = d.ride_id
ORDER BY 
  a.ride_id;


                                       ## Delete duplicate ride_ids using a temp table, drop temp table ##

CREATE OR REPLACE TABLE `cyclistic-data-strategy.555.temporary_table` AS 
WITH duplicate_row AS (
  SELECT
    *
  FROM
    `cyclistic-data-strategy.555.ALL`
  QUALIFY ROW_NUMBER() OVER (PARTITION BY ride_id ORDER BY started_at DESC) > 1
)
SELECT * FROM duplicate_row;

DELETE FROM `cyclistic-data-strategy.555.ALL`
WHERE (ride_id) IN (
  SELECT ride_id FROM `cyclistic-data-strategy.555.temporary_table`
);

DROP TABLE `cyclistic-data-strategy.555.temporary_table`;

-- OR 3rd way is

SELECT 
  COUNT(ride_id) - COUNT(DISTINCT ride_id) AS duplicate_rows
FROM `cyclistic-data-strategy.555.ALL`;
FROM counts
WHERE count > 0;


                                                ## CREATE COLUMNS ##

CREATE OR REPLACE TABLE `cyclistic-data-strategy.555.ALLCLEAN` AS
SELECT
  EXTRACT(YEAR FROM started_at) AS Y,
  CASE
    WHEN EXTRACT(MONTH FROM started_at) = 1 THEN 'January'
    WHEN EXTRACT(MONTH FROM started_at) = 2 THEN 'February'
    WHEN EXTRACT(MONTH FROM started_at) = 3 THEN 'March'
    WHEN EXTRACT(MONTH FROM started_at) = 4 THEN 'April'
    WHEN EXTRACT(MONTH FROM started_at) = 5 THEN 'May'
    WHEN EXTRACT(MONTH FROM started_at) = 6 THEN 'June'
    WHEN EXTRACT(MONTH FROM started_at) = 7 THEN 'July'
    WHEN EXTRACT(MONTH FROM started_at) = 8 THEN 'August'
    WHEN EXTRACT(MONTH FROM started_at) = 9 THEN 'September'
    WHEN EXTRACT(MONTH FROM started_at) = 10 THEN 'October'
    WHEN EXTRACT(MONTH FROM started_at) = 11 THEN 'November'
    WHEN EXTRACT(MONTH FROM started_at) = 12 THEN 'December'
    ELSE CAST(EXTRACT(MONTH FROM started_at) AS STRING)
  END AS month,
  EXTRACT(WEEK FROM started_at) AS Week_Year,
  EXTRACT(DAY FROM started_at) AS Day_Month,
  CASE
    WHEN EXTRACT(dayofweek FROM started_at) = 1 THEN 'Monday'
    WHEN EXTRACT(dayofweek FROM started_at) = 2 THEN 'Tuesday'
    WHEN EXTRACT(dayofweek FROM started_at) = 3 THEN 'Wednesday'
    WHEN EXTRACT(dayofweek FROM started_at) = 4 THEN 'Thursday'
    WHEN EXTRACT(dayofweek FROM started_at) = 5 THEN 'Friday'
    WHEN EXTRACT(dayofweek FROM started_at) = 6 THEN 'Saturday'
    WHEN EXTRACT(dayofweek FROM started_at) = 7 THEN 'Sunday'
    ELSE CAST(EXTRACT(dayofweek FROM started_at) AS STRING)
  END AS dayofweek,
  CASE
    WHEN EXTRACT(HOUR FROM started_at) = 0 THEN '12 AM'
    WHEN EXTRACT(HOUR FROM started_at) BETWEEN 1 AND 11 THEN CAST(EXTRACT(HOUR FROM started_at) AS STRING) || ' AM'
    WHEN EXTRACT(HOUR FROM started_at) = 12 THEN '12 PM'
    WHEN EXTRACT(HOUR FROM started_at) BETWEEN 13 AND 23 THEN CAST(EXTRACT(HOUR FROM started_at) - 12 AS STRING) || ' PM'
    ELSE CAST(EXTRACT(HOUR FROM started_at) AS STRING)
  END AS timeofday,
  ROUND((TIMESTAMP_DIFF(ended_at, started_at, minute) / 60), 4) AS dur_h,
  TIMESTAMP_DIFF(ended_at, started_at, minute) AS dur_m,
  TIMESTAMP_DIFF(ended_at, started_at, second) AS dur_s,
  6371 * 2 * ASIN(SQRT(POWER(SIN((end_lat - start_lat) * 3.14 / 180 / 2), 2)
                   + COS(start_lat * 3.14 / 180) 
                   * COS(end_lat * 3.14 / 180) 
                   * POWER(SIN((end_lng - start_lng) * 3.14 / 180 / 2), 2))) * 3280.84 AS distance_ft,
  6371 * 2 * ASIN(SQRT(POWER(SIN((end_lat - start_lat) * 3.14 / 180 / 2), 2)
                   + COS(start_lat * 3.14 / 180) 
                   * COS(end_lat * 3.14 / 180) 
                   * POWER(SIN((end_lng - start_lng) * 3.14 / 180 / 2), 2))) * 3280.84 / 5280 AS distance_mi,
  ROUND((6371 * 2 * ASIN(SQRT(POWER(SIN((end_lat - start_lat) * 3.14 / 180 / 2), 2)
                   + COS(start_lat * 3.14 / 180) 
                   * COS(end_lat * 3.14 / 180) 
                   * POWER(SIN((end_lng - start_lng) * 3.14 / 180 / 2), 2))) * 3280.84 / 5280) / (TIMESTAMP_DIFF(ended_at, started_at, minute) / 60), 2) AS mph
FROM
  `cyclistic-data-strategy.555.ALL`
WHERE TIMESTAMP_DIFF(ended_at, started_at, minute) <= 480  --(8 hours, 60x8)
AND TIMESTAMP_DIFF(ended_at, started_at, minute) > 0;


                                              ## Transform irregularities ##

# fix start_station_name's

-- Remove trailing' (Public Rack) - ' from start_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r' \(Public Rack\) - $', ''))
WHERE REGEXP_CONTAINS(start_station_name, r' \(Public Rack\) - $');

-- Remove trailing asterisks from start_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'\*$', ''))
WHERE REGEXP_CONTAINS(start_station_name, r'\*$');

-- Remove trailing ' (Temp)' from start_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r' \ (Temp\)$', ''))
WHERE REGEXP_CONTAINS(start_station_name, r' \ (Temp\)$');

-- Remove leading '(Public Rack) - ' from start_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'^\(Public Rack\) - ', ''))
WHERE REGEXP_CONTAINS(start_station_name, r'^\(Public Rack\) - ');

-- Remove occurrences of 'midblock' from start_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'midblock', ''))
WHERE REGEXP_CONTAINS(start_station_name, r'midblock');

-- Change 'Buckingham - Fountain' to 'Buckingham Fountain' in start_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'Buckingham - Fountain', 'Buckingham Fountain'))
WHERE REGEXP_CONTAINS(start_station_name, r'Buckingham - Fountain');

-- Change 'Mason & Archer' to 'Mason Ave & Archer Ave' in start_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'Mason & Archer', 'Mason Ave & Archer Ave'))
WHERE REGEXP_CONTAINS(start_station_name, r'Mason & Archer');

               -- Repeat the same for end stations.
-- Remove trailing ' (Public Rack) - ' from end_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r' \(Public Rack\) - $', ''))
WHERE REGEXP_CONTAINS(end_station_name, r' \(Public Rack\) - $');

-- Remove trailing asterisks from end_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'\*$', ''))
WHERE REGEXP_CONTAINS(end_station_name, r'\*$');

-- Remove trailing ' (Temp)' from end_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r' \ (Temp\)$', ''))
WHERE REGEXP_CONTAINS(end_station_name, r' \ (Temp\)$');

-- Remove leading '(Public Rack) - ' from end_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'^\(Public Rack\) - ', ''))
WHERE REGEXP_CONTAINS(end_station_name, r'^\(Public Rack\) - ');

-- Remove occurrences of 'midblock' from end_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'midblock', ''))
WHERE REGEXP_CONTAINS(end_station_name, r'midblock');

-- Change 'Buckingham - Fountain' to 'Buckingham Fountain' in end_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'Buckingham - Fountain', 'Buckingham Fountain'))
WHERE REGEXP_CONTAINS(end_station_name, r'Buckingham - Fountain');

-- Change 'Mason & Archer' to 'Mason Ave & Archer Ave' in end_station_name
UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'Mason & Archer', 'Mason Ave & Archer Ave'))
WHERE REGEXP_CONTAINS(end_station_name, r'Mason & Archer');


                                                ### DELETE UNIMPORTANT INFO ###

DELETE
FROM `cyclistic-data-strategy.555.ALLCLEAN`
WHERE
start_station_name LIKE '%BONFIRE%'
OR
end_station_name LIKE '%BONFIRE%';


                              ### Switch duration data on any rides which ended_at > started_at.  ###

SELECT
*
FROM
`cyclistic-data-strategy.555.ALL`
WHERE started_at > ended_at;

UPDATE `cyclistic-data-strategy.555.ALL`
SET started_at = ended_at,
    ended_at = started_at
WHERE started_at > ended_at;

