UPDATE `cyclistic-data-strategy.555.ALL`
SET
start_station_name = REGEXP_REPLACE(start_station_name, 'Public Rack - ', ''),
end_station_name = REGEXP_REPLACE(end_station_name, 'Public Rack - ', '')
WHERE end_station_name LIKE '%Public Rack%' OR start_station_name LIKE '%Public Rack%';


##
#3.1 - Null Report
##
WITH schema_info AS (
 SELECT
   'ride_id' AS field_name,
   COUNTIF(ride_id IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`

 UNION ALL

 SELECT
   'rideable_type' AS field_name,
   COUNTIF(rideable_type IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`

 UNION ALL

 SELECT
   'started_at' AS field_name,
   COUNTIF(started_at IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
 
 UNION ALL
 
 SELECT
   'ended_at' AS field_name,
   COUNTIF(ended_at IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
 
 UNION ALL
 
 SELECT
   'start_station_name' AS field_name,
   COUNTIF(start_station_name IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
 
 UNION ALL
 
 SELECT
   'start_station_id' AS field_name,
   COUNTIF(start_station_id IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`

 UNION ALL
 
 SELECT
   'end_station_name' AS field_name,
   COUNTIF(end_station_name IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`

 UNION ALL

 SELECT
   'end_station_id' AS field_name,
   COUNTIF(end_station_id IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
 
 UNION ALL
 
 SELECT
   'start_lat' AS field_name,
   COUNTIF(start_lat IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
 
 UNION ALL
 
 SELECT
   'start_lng' AS field_name,
   COUNTIF(start_lng IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
 
 UNION ALL
 
 SELECT
   'end_lat' AS field_name,
   COUNTIF(end_lat IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
 
 UNION ALL
 
 SELECT
   'end_lng' AS field_name,
   COUNTIF(end_lng IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
 
 UNION ALL
 
 SELECT
   'member_casual' AS field_name,
   COUNTIF(member_casual IS NULL) AS null_count
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
),


total_nulls AS (
 SELECT
   SUM(null_count) AS total_null_count
 FROM schema_info
),


total_entries AS (
 SELECT
   COUNT(ride_id) AS total_entries
 FROM `cyclistic-data-strategy.555.ALLCLEAN`
)




SELECT
 s.field_name,
 s.null_count,
 ROUND((s.null_count / (SELECT COUNT(1) FROM `cyclistic-data-strategy.555.ALLCLEAN`)) * 100, 2) AS null_percentage,
 e.total_entries AS total_entries
FROM schema_info s
LEFT JOIN total_nulls t ON 1=1
CROSS JOIN total_entries e
UNION ALL
SELECT
 'NULL TOTALS' AS field_name,
 t.total_null_count AS null_count,
 ROUND((t.total_null_count / (SELECT COUNT(1) FROM `cyclistic-data-strategy.555.ALLCLEAN`)) * 100, 2) AS null_percentage,
 e.total_entries AS total_entries_per_column
FROM total_nulls t, total_entries e
ORDER BY field_name DESC NULLS LAST;


##
#CLEAN FIND
##

SELECT 
Distinct(start_station_name),
start_lat,
start_lng
FROM `cyclistic-data-strategy.555.ALLCLEAN`
WHERE REGEXP_CONTAINS(start_station_name, r'[\(\*/]');

##
# 
##

SELECT
DISTINCT start_station_name,
COUNT(start_station_name) AS count
FROM
`cyclistic-data-strategy.555.ALL`

GROUP BY
start_station_name;

SELECT
DISTINCT end_station_name,
COUNT(end_station_name) AS count
FROM
`cyclistic-data-strategy.555.ALL`

GROUP BY
end_station_name

##
SELECT
DISTINCT start_station_name,
COUNT(start_station_name) AS count
FROM
`cyclistic-data-strategy.555.ALL`

GROUP BY
start_station_name;

SELECT
DISTINCT end_station_name,
COUNT(end_station_name) AS count
FROM
`cyclistic-data-strategy.555.ALL`

GROUP BY
end_station_name

## NULL REPORT - STATIONS
SELECT
    SUM(CASE WHEN start_station_name IS NULL THEN 1 ELSE 0 END) AS start_station_nulls,
    SUM(CASE WHEN end_station_name IS NULL THEN 1 ELSE 0 END) AS end_station_nulls,
    COUNT(*) AS total_entries,
    (SUM(CASE WHEN start_station_name IS NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS start_station_null_percentage,
    (SUM(CASE WHEN end_station_name IS NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS end_station_null_percentage
FROM
  `cyclistic-data-strategy.555.ALLCLEAN_withfixes`; 

## REGEX FIX
WITH cleaned_data AS (
  SELECT
    -- Remove leading and trailing spaces
    REGEXP_REPLACE(start_station_name, r'^\s+|\s+$', '') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'^\s+|\s+$', '') AS cleaned_end_station_name,
    -- Remove asterisks
    REGEXP_REPLACE(REGEXP_REPLACE(start_station_name, r'\*', ''), r'\*', '') AS cleaned_start_station_name,
    REGEXP_REPLACE(REGEXP_REPLACE(end_station_name, r'\*', ''), r'\*', '') AS cleaned_end_station_name,
    -- Remove specific patterns
    REGEXP_REPLACE(start_station_name, r' - midblock$', '') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r' - midblock$', '') AS cleaned_end_station_name,
    -- Replace specific keywords
    REGEXP_REPLACE(start_station_name, r'test', 'Test', TRUE) AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'test', 'Test', TRUE) AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'Temp', '', TRUE) AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'Temp', '', TRUE) AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'repair', 'Repair', TRUE) AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'repair', 'Repair', TRUE) AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'Charging', '', TRUE) AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'Charging', '', TRUE) AS cleaned_end_station_name,
    -- Standardize specific station names
    REGEXP_REPLACE(start_station_name, r'^DIVVY CASSETTE REPAIR MOBILE STATION$', 'Divvy Cassette Repair Mobile Station') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'^DIVVY CASSETTE REPAIR MOBILE STATION$', 'Divvy Cassette Repair Mobile Station') AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'^Lyft$', 'Lyft Driver Center Private Rack') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'^Lyft$', 'Lyft Driver Center Private Rack') AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'^351$', '351 Station') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'^351$', '351 Station') AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'^Base - 2132 W Hubbard Warehouse$', 'Base - 2132 W Hubbard') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'^Base - 2132 W Hubbard Warehouse$', 'Base - 2132 W Hubbard') AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'Hubbard Bike-checking \(LBS-WH-TEST\)', 'Hubbard Bike-checking') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'Hubbard Bike-checking \(LBS-WH-TEST\)', 'Hubbard Bike-checking') AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'Public Rack - ', 'Public Rack') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'Public Rack - ', 'Public Rack') AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'Buckingham - Fountain', 'Buckingham Fountain') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'Buckingham - Fountain', 'Buckingham Fountain') AS cleaned_end_station_name,
    REGEXP_REPLACE(start_station_name, r'Mason & Archer', 'Mason and Archer') AS cleaned_start_station_name,
    REGEXP_REPLACE(end_station_name, r'Mason & Archer', 'Mason and Archer') AS cleaned_end_station_name
  FROM `cyclistic-data-strategy.555.ALL`
)

SELECT *
FROM cleaned_data;

##FINAL REGEX 
-- Remove trailing' (Public Rack) - ' from start_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r' \(Public Rack\) - $', ''))
WHERE REGEXP_CONTAINS(start_station_name, r' \(Public Rack\) - $');

-- Remove trailing asterisks from start_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'\*$', ''))
WHERE REGEXP_CONTAINS(start_station_name, r'\*$');

-- Remove trailing ' (Temp)' from start_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r' \ (Temp\)$', ''))
WHERE REGEXP_CONTAINS(start_station_name, r'\(Temp\)$');

-- Remove leading '(Public Rack) - ' from start_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'^\(Public Rack\) - ', ''))
WHERE REGEXP_CONTAINS(start_station_name, r'^\(Public Rack\) - ');

-- Remove occurrences of 'midblock' from start_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'midblock', ''))
WHERE REGEXP_CONTAINS(start_station_name, r'midblock');

-- Change 'Buckingham - Fountain' to 'Buckingham Fountain' in start_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'Buckingham - Fountain', 'Buckingham Fountain'))
WHERE REGEXP_CONTAINS(start_station_name, r'Buckingham - Fountain');

-- Change 'Mason & Archer' to 'Mason Ave & Archer Ave' in start_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = TRIM(REGEXP_REPLACE(start_station_name, r'Mason & Archer', 'Mason Ave & Archer Ave'))
WHERE REGEXP_CONTAINS(start_station_name, r'Mason & Archer');

               -- Repeat the same for end stations.
-- Remove trailing ' (Public Rack) - ' from end_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r' \(Public Rack\) - $', ''))
WHERE REGEXP_CONTAINS(end_station_name, r' \(Public Rack\) - $');

-- Remove trailing asterisks from end_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'\*$', ''))
WHERE REGEXP_CONTAINS(end_station_name, r'\*$');

-- Remove trailing ' (Temp)' from end_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'\(Temp\)$', ''))
WHERE REGEXP_CONTAINS(end_station_name, r'\(Temp\)$');

-- Remove leading '(Public Rack) - ' from end_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'^\(Public Rack\) - ', ''))
WHERE REGEXP_CONTAINS(end_station_name, r'^\(Public Rack\) - ');

-- Remove occurrences of 'midblock' from end_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'midblock', ''))
WHERE REGEXP_CONTAINS(end_station_name, r'midblock');

-- Change 'Buckingham - Fountain' to 'Buckingham Fountain' in end_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'Buckingham - Fountain', 'Buckingham Fountain'))
WHERE REGEXP_CONTAINS(end_station_name, r'Buckingham - Fountain');

-- Change 'Mason & Archer' to 'Mason Ave & Archer Ave' in end_station_name
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = TRIM(REGEXP_REPLACE(end_station_name, r'Mason & Archer', 'Mason Ave & Archer Ave'))
WHERE REGEXP_CONTAINS(end_station_name, r'Mason & Archer');


## REGEX 3.2a - Pattern irregularity REPORT REGEX
/*

Here are some common regular expression patterns you can use with these functions:
.: Matches any single character.
^: Matches the beginning of a string.
$: Matches the end of a string.
*: Matches zero or more occurrences of the preceding element.
+: Matches one or more occurrences of the preceding element.
?: Matches zero or one occurrence of the preceding element.
[]: Matches any one of the characters inside the brackets.
(): Groups patterns and captures the match.
|: Alternation, matches either the pattern before or the pattern after the |.

*/


WITH counts AS (
  SELECT 
    'start_station_starts_with_space' AS pattern, COUNTIF(REGEXP_CONTAINS(start_station_name, r'^ ')) AS count FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_ends_with_space', COUNTIF(REGEXP_CONTAINS(start_station_name, r' $')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_ends_with_asterisk', COUNTIF(REGEXP_CONTAINS(start_station_name, r'\*$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_ends_with_midblock', COUNTIF(REGEXP_CONTAINS(start_station_name, r' - midblock$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_test', COUNTIF(REGEXP_CONTAINS(start_station_name, r'test')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_temp', COUNTIF(REGEXP_CONTAINS(start_station_name, r'Temp')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_repair', COUNTIF(REGEXP_CONTAINS(start_station_name, r'repair')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_charging', COUNTIF(REGEXP_CONTAINS(start_station_name, r'Charging')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_asterisk', COUNTIF(REGEXP_CONTAINS(start_station_name, r'\*')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_contains_TEST', COUNTIF(REGEXP_CONTAINS(start_station_name, r'TEST')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_is_lyft_driver_center_private_rack', COUNTIF(REGEXP_CONTAINS(start_station_name, r'^Lyft$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_is_buckingham_fountain', COUNTIF(REGEXP_CONTAINS(start_station_name, r'Buckingham - Fountain')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'start_station_is_mason_archer', COUNTIF(REGEXP_CONTAINS(start_station_name, r'Mason & Archer')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_starts_with_space', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^ ')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_ends_with_space', COUNTIF(REGEXP_CONTAINS(end_station_name, r' $')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_ends_with_asterisk', COUNTIF(REGEXP_CONTAINS(end_station_name, r'\*$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_ends_with_midblock', COUNTIF(REGEXP_CONTAINS(end_station_name, r' - midblock$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_test', COUNTIF(REGEXP_CONTAINS(end_station_name, r'test')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_temp', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Temp')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_repair', COUNTIF(REGEXP_CONTAINS(end_station_name, r'repair')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_charging', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Charging')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_asterisk', COUNTIF(REGEXP_CONTAINS(end_station_name, r'\*')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_contains_TEST', COUNTIF(REGEXP_CONTAINS(end_station_name, r'TEST')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_divvy_cassette_repair_mobile_station', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^DIVVY CASSETTE REPAIR MOBILE STATION$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_lyft_driver_center_private_rack', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^Lyft$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_351', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^351$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_base_2132_w_hubbard_warehouse', COUNTIF(REGEXP_CONTAINS(end_station_name, r'^Base - 2132 W Hubbard Warehouse$')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_is_hubbard_bike_checking', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Hubbard Bike-checking \(LBS-WH-TEST\)')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_public_rack', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Public Rack - ')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_buckingham_fountain', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Buckingham - Fountain')) FROM `cyclistic-data-strategy.555.ALL`
  UNION ALL
  SELECT 
    'end_station_mason_archer', COUNTIF(REGEXP_CONTAINS(end_station_name, r'Mason & Archer')) FROM `cyclistic-data-strategy.555.ALL`
)

SELECT pattern, count
FROM counts
WHERE count > 0;


/*

SELECT pattern, count
FROM counts
WHERE count > 0;

start_station_name = "Public Rack - " significat amount

start_station_name = '*' significant amounts

start_station_name = ' (Test)'

start_station_name =' (Temp)'

start_station_name = 'Base - 2132 W Hubbard Warehouse' 

start_station_name = 'Hubbard' 

start_station_name = 'SCOOTERS CLASSIC - 2132 W Hubbard ST'

start_station_name = 'MTV WH - Cassette Repair

start_station_name = '*' significant amounts

start_station_name = 'Base - 2132 W Hubbard'

'%Buckingham - Fountain%';
'%Mason & Archer%';

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
-- ^ starts with a space
WHERE REGEXP_CONTAINS(start_station_name, r'^ ')
-- $ ends with a space
OR REGEXP_CONTAINS(start_station_name, r' $')
-- 
OR REGEXP_CONTAINS(start_station_name, r'\*$') 
--
OR REGEXP_CONTAINS(start_station_name, r' - midblock$')
--ends with midblock
OR REGEXP_CONTAINS(start_station_name, r'Public Rack - ')
OR REGEXP_CONTAINS(start_station_name,'%test%')
OR REGEXP_CONTAINS(start_station_name,'%Temp%')
OR REGEXP_CONTAINS(start_station_name,'%repair%')
OR REGEXP_CONTAINS(start_station_name,'%Charging%')
OR REGEXP_CONTAINS(start_station_name,'%*%')
OR REGEXP_CONTAINS(start_station_name, r'TEST')
OR REGEXP_CONTAINS(start_station_name, r'^DIVVY CASSETTE REPAIR MOBILE STATION$')
OR REGEXP_CONTAINS(start_station_name, r'^Lyft Driver Center Private Rack$') 
OR REGEXP_CONTAINS(start_station_name, r'^351$') 
OR REGEXP_CONTAINS(start_station_name, r'^Base - 2132 W Hubbard Warehouse$')
OR REGEXP_CONTAINS(start_station_name, r'^Hubbard Bike-checking \(LBS-WH-TEST\)$')
OR REGEXP_CONTAINS(start_station_name, r'^WEST CHI-WATSON$') 
*/


## 3.2b fix irregularity
## 
# start station updates
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = REPLACE(start_station_name, 'Public Rack - ', '')
WHERE start_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = REPLACE(start_station_name, '(Temp)', '')
WHERE start_station_name LIKE '(Temp)%';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = TRIM(start_station_name)
WHERE REGEXP_CONTAINS(start_station_name, r' $');



# end station updates
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = REPLACE(end_station_name, 'Public Rack - ', '')
WHERE end_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = REPLACE(end_station_name, '(Temp)%', '')
WHERE end_station_name LIKE '(Temp)%';


## 3.2bb fix irregularity _withfixes
##
# start station updates
UPDATE `cyclistic-data-strategy.555.ALLCLEAN_withfixes`
SET start_station_name = REPLACE(start_station_name, 'Public Rack - ', '')
WHERE start_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN_withfixes`
SET start_station_name = REPLACE(start_station_name, '(Temp)', '')
WHERE start_station_name LIKE '(Temp)%';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN_withfixes`
SET start_station_name = TRIM(start_station_name)
WHERE REGEXP_CONTAINS(start_station_name, r' $');



# end station updates
UPDATE `cyclistic-data-strategy.555.ALLCLEAN_withfixes`
SET end_station_name = REPLACE(end_station_name, 'Public Rack - ', '')
WHERE end_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN_withfixes`
SET end_station_name = REPLACE(end_station_name, '(Temp)%', '')
WHERE end_station_name LIKE '(Temp)%';

## 3.2c delete entry
DELETE
FROM `cyclistic-data-strategy.555.ALL`
WHERE
start_station_name LIKE '%BONFIRE%'

OR

end_station_name LIKE '%BONFIRE%';

#
#3.2c_CleanALLLCLEANwith fixes
# start station updates
UPDATE `cyclistic-data-strategy.555.ALLCLEAN_WITH_COST`
SET start_station_name = REPLACE(start_station_name, 'Public Rack - ', '')
WHERE start_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN_withfixes`
SET start_station_name = REPLACE(start_station_name, '(Temp)', '')
WHERE start_station_name LIKE '(Temp)%';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN_withfixes`
SET start_station_name = TRIM(start_station_name)
WHERE REGEXP_CONTAINS(start_station_name, r' $');

# end station updates
UPDATE `cyclistic-data-strategy.555.ALLCLEAN_withfixes`
SET end_station_name = REPLACE(end_station_name, 'Public Rack - ', '')
WHERE end_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN_withfixes`
SET end_station_name = REPLACE(end_station_name, '(Temp)%', '')
WHERE end_station_name LIKE '(Temp)%';


##
#3.3a WHERE LIKE, ID Entries
##

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '%Public Rack - %';

--21,595 start station names begin with 'Public Rack - '

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '%Public Rack - %';

--21,245 end station names begin with 'Public Rack - '

UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, 'Public Rack - ', '')
WHERE start_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(start_station_name, 'Public Rack - ', '')
WHERE end_station_name LIKE 'Public Rack - %';


SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '%Buckingham - Fountain%';

--207 entries

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '%Buckingham - Fountain%';

--173 entries


SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '%Mason & Archer%';

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '%Mason & Archer%';



UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, 'Buckingham - Fountain', 'Buckingham Fountain')
WHERE start_station_name LIKE '%Buckingham - Fountain%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(end_station_name, 'Buckingham - Fountain', 'Buckingham Fountain')
WHERE end_station_name LIKE '%Buckingham - Fountain%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, 'Mason & Archer', 'Mason Ave & Belmont Ave ')
WHERE start_station_name LIKE '%Mason & Archer%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(end_station_name, 'Mason & Archer', 'Mason Ave & Belmont Ave')
WHERE end_station_name LIKE '%Mason & Archer%';
,
SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '%*%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, '*', '')
WHERE start_station_name LIKE '%*%';
This statement modified 51,470 rows in ALL.
,
SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '%*%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(end_station_name, '*', '')
WHERE end_station_name LIKE '%*%';
This statement modified 56,139 rows in ALL.

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '% (Temp)%';

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '% (Temp)%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, ' (Temp)', '')
WHERE start_station_name LIKE '% (Temp)%';
--This statement modified 22,387 rows in ALL.

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(end_station_name, ' (Temp)', '')
WHERE end_station_name LIKE '% (Temp)%';
--This statement modified 22,013 rows in ALL.


                                  ## START STATION

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '%Public Rack - %';
----21,595 start station names begin with 'Public Rack - '

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '%Buckingham - Fountain%';
----207 entries

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '%Mason & Archer%';
----

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '%Mason & Archer%';
----
SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '%*%';


SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '% (Temp)%';

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '% (Temp)%';

                                ## END STATION

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '%Public Rack - %';

--21,245 end station names begin with 'Public Rack - '

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '%Buckingham - Fountain%';

--173 entries

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '%Mason & Archer%';
--

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE start_station_name LIKE '% (Temp)%';

SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '% (Temp)%';

,
SELECT *
FROM `cyclistic-data-strategy.555.ALL`
WHERE end_station_name LIKE '%*%';


                                           
     ## UPDATE

UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, 'Public Rack - ', '')
WHERE start_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(end_station_name, 'Public Rack - ', '')
WHERE end_station_name LIKE 'Public Rack - %';

# start station updates
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = REPLACE(start_station_name, 'Public Rack - ', '')
WHERE start_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET start_station_name = REPLACE(start_station_name, ' (Temp)', '')
WHERE start_station_name LIKE ' (Temp)%';

# end station updates
UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = REPLACE(end_station_name, 'Public Rack - ', '')
WHERE end_station_name LIKE 'Public Rack - %';

UPDATE `cyclistic-data-strategy.555.ALLCLEAN`
SET end_station_name = REPLACE(end_station_name, ' (Temp)%', '')
WHERE end_station_name LIKE ' (Temp)%';


UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, 'Buckingham - Fountain', 'Buckingham Fountain')
WHERE start_station_name LIKE '%Buckingham - Fountain%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(end_station_name, 'Buckingham - Fountain', 'Buckingham Fountain')
WHERE end_station_name LIKE '%Buckingham - Fountain%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, 'Mason & Archer', 'Mason Ave & Belmont Ave ')
WHERE start_station_name LIKE '%Mason & Archer%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(end_station_name, 'Mason & Archer', 'Mason Ave & Belmont Ave')
WHERE end_station_name LIKE '%Mason & Archer%';

UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, '*', '')
WHERE start_station_name LIKE '%*%';
This statement modified 51,470 rows in ALL.

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(end_station_name, '*', '')
WHERE end_station_name LIKE '%*%';
This statement modified 56,139 rows in ALL.

UPDATE `cyclistic-data-strategy.555.ALL`
SET start_station_name = REPLACE(start_station_name, ' (Temp)', '')
WHERE start_station_name LIKE '% (Temp)%';
--This statement modified 22,387 rows in ALL.

UPDATE `cyclistic-data-strategy.555.ALL`
SET end_station_name = REPLACE(end_station_name, ' (Temp)', '')
WHERE end_station_name LIKE '% (Temp)%';
--This statement modified 22,013 rows in ALL.


##
#3.9 EDIT UPDATE/ JOIN
##
Yes, you can update entries using a `JOIN` in SQL. This is particularly useful when you need to update a table based on values from another table. Here’s an example to illustrate how you can do this:

### Scenario:
Suppose you have two tables:
1. `cyclistic-data-strategy.555.ALL`: The main table where you want to update entries.
2. `station_updates`: A table that contains the new values for `start_station_name` and `end_station_name`.

### Example Tables:
#### `cyclistic-data-strategy.555.ALL`
| trip_id | start_station_name     | end_station_name       |
|---------|------------------------|------------------------|
| 1       | Old Station Name 1     | Old Station Name 2     |
| 2       | Old Station Name 3     | Old Station Name 4     |

#### `station_updates`
| old_name             | new_name               |
|----------------------|------------------------|
| Old Station Name 1   | New Station Name 1     |
| Old Station Name 3   | New Station Name 3     |

### Query to Update `cyclistic-data-strategy.555.ALL` using a `JOIN`:
```sql
UPDATE `cyclistic-data-strategy.555.ALL` AS c
SET 
  start_station_name = u.new_name
FROM `station_updates` AS u
WHERE c.start_station_name = u.old_name;

UPDATE `cyclistic-data-strategy.555.ALL` AS c
SET 
  end_station_name = u.new_name
FROM `station_updates` AS u
WHERE c.end_station_name = u.old_name;
```

### Explanation:
- The query uses an `UPDATE` statement with a `JOIN` to match rows in `cyclistic-data-strategy.555.ALL` with rows in `station_updates`.
- The `SET` clause specifies the columns to be updated.
- The `WHERE` clause ensures that only matching rows are updated.

### Updating with REGEXP using JOIN:
If you need to update based on a more complex pattern, you can combine `JOIN` with `REGEXP_CONTAINS`. Here’s how you can do it:

#### Example Table for Updates with Patterns:
#### `pattern_updates`
| pattern                | replacement           |
|------------------------|-----------------------|
| \\*$                   |                       |
| \\(Temp\\)$            |                       |
| ^\\(Public Rack\\) -   |                       |
| \\(Public Rack\\) - $  |                       |
| midblock               |                       |
| Buckingham - Fountain  | Buckingham Fountain   |
| Mason & Archer         | Mason Ave & Archer Ave|

### Query to Update Using Patterns:
```sql
-- Example to demonstrate concept, this won't work directly in BigQuery as it lacks REGEXP_CONTAINS in JOIN condition
-- You may need a procedural script or separate updates if using patterns
```

### Practical Approach with Multiple Updates:
Given the complexity of using `REGEXP` with `JOIN` in standard SQL, you might need to handle complex patterns with multiple `UPDATE` statements as shown earlier.

For simple matches with exact values, using `JOIN` as shown above is effective and straightforward. For complex patterns, consider scripting or using multiple `UPDATE` statements as previously discussed.
