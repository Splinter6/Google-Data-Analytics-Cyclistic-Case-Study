--How many total rides?
Before we started our cleaning process, there were 5743278 entries. Each one represents a ride.
After cleaning we ended up w 4314855 rides.

-- Calculate Total Rides for M & C
a. Total number of rides which was just the row count = 4,152,139
       Member type - casual riders vs. annual members
              M
              C


--
b. Type of Bike - classic vs docked vs electric; T/M/C
 
  classic
  docked
  electric
  
  M
  c
  d
  e

  C
  cde

--Rides per h,D, W, M:
d. Hour - separated by member type and total rides for each hour in a day

## e. Time of Day - separated by member type and total rides for each time of day (morning, afternoon, evening, night)

WITH CategorizedTrips AS (
    SELECT
        CASE
            WHEN EXTRACT(HOUR FROM started_at) BETWEEN 6 AND 11 THEN 'Morning  (6-11am)'
            WHEN EXTRACT(HOUR FROM started_at) BETWEEN 12 AND 17 THEN 'Afternoon(12-5pm)'
            WHEN EXTRACT(HOUR FROM started_at) BETWEEN 18 AND 23 THEN 'Evening  (6-11pm)'
            ELSE 'Night       (12-5am)'
        END AS time_of_day,
        COUNT(*) AS TotalTrips,
        COUNT(CASE WHEN member_casual = 'member' THEN 1 END) AS MemberTrips,
        COUNT(CASE WHEN member_casual = 'casual' THEN 1 END) AS CasualTrips
    FROM
        `cyclistic-data-strategy.555.ALLCLEAN`
    GROUP BY
        time_of_day
)
SELECT
    time_of_day,
    TotalTrips,
    MemberTrips,
    CasualTrips
FROM
    CategorizedTrips
ORDER BY
    CASE
        WHEN time_of_day = 'Morning' THEN 1
        WHEN time_of_day = 'Afternoon' THEN 2
        WHEN time_of_day = 'Evening' THEN 3
        ELSE 4
    END

## f. Day of the Week - separated by member type and total rides for each day of the week
SELECT
    dayofweek,
    member_casual,
    COUNT(*) AS ride_count
FROM 
    `cyclistic-data-strategy.555.ALLCLEAN`
GROUP BY 
    dayofweek,
    DATE(started_at),
    member_casual
ORDER BY 
    member_casual;

g. Day of the Month - separated by member type and total rides for each day of the month

h. Month - separated by member type and total rides for each month

i. Season - separated by member type and total rides for each season (spring,  summer, fall, winter)


4.3 Distance

Calculated Average Ride Length for:
Total average ride length
Member type - casual riders vs. annual members 
Type of Bike - separated by member type and average ride length for each bike type
Hour - separated by member type and average ride length for each hour in a day
Time of Day - separated by member type and average ride length for each time of day (morning, afternoon, evening, night)
Day of the Week - separated by member type and average ride length for each day of the week
Day of the Month - separated by member type and average ride length for each day of the month
Month - separated by member type and average ride length for each month
Season - separated by member type and average ride lengths for each season (spring,  summer, fall, winter)

4.5

--Rides start station = end station
SELECT
  ride_id,
  member_casual,
  start_station_name,
  end_station_name,
  started_at,
  ended_at
FROM
  `cyclistic-data-strategy.555.ALLCLEAN`
WHERE
  start_station_id = end_station_id

--191576 total rides

-- percent of member vs casual where start station = end station
SELECT
  member_casual,
  COUNTIF(start_station_id = end_station_id) AS same_station_count,
  COUNT(ride_id) AS total_count,
  ROUND((COUNTIF(start_station_id = end_station_id) / COUNT(ride_id)) * 100, 2) AS same_station_percentage
FROM
  `cyclistic-data-strategy.555.ALL`
GROUP BY
  member_casual

--percent of M vs C & Total / where start_station = end_station
SELECT
  member_casual,
  COUNTIF(start_station_id = end_station_id) AS same_station_count,
  COUNT(ride_id) AS total_count,
  ROUND((COUNTIF(start_station_id = end_station_id) / COUNT(ride_id)) * 100, 2) AS same_station_percentage
FROM
  `cyclistic-data-strategy.555.ALL`
GROUP BY
  member_casual

UNION ALL

SELECT
  'All' AS member_casual,
  COUNTIF(start_station_id = end_station_id) AS same_station_count,
  COUNT(ride_id) AS total_count,
  ROUND((COUNTIF(start_station_id = end_station_id) / COUNT(ride_id)) * 100, 2) AS same_station_percentage
FROM
  `cyclistic-data-strategy.555.ALL`
